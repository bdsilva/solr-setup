<?xml version="1.0" encoding="UTF-8" ?>

<schema name="example" version="1.2">
  <!-- attribute "name" is the name of this schema and is only used
	 for display purposes.  Applications should change this to
	 reflect the nature of the search collection.  version="1.2"
	 is Solr's version number for the schema syntax and semantics.
	 It should not normally be changed by applications.  1.0:
	 multiValued attribute did not exist, all fields are
	 multiValued by nature 1.1: multiValued attribute introduced,
	 false by default 1.2: omitTermFreqAndPositions attribute
	 introduced, true by default except for text fields.
      -->

  <types>
    <!-- field type definitions. The "name" attribute is just a label
	 to be used by field definitions.  The "class" attribute and any other
	 attributes determine the real behavior of the fieldType.  Class names
	 starting with "solr" refer to java classes in the
	 org.apache.solr.analysis package.
      -->

    <!-- The StrField type is not analyzed, but indexed/stored
	 verbatim.  - StrField and TextField support an optional
	 compressThreshold which limits compression (if enabled in the
	 derived fields) to values which exceed a certain size (in
	 characters).
      -->
    <fieldType name="string" class="solr.StrField" sortMissingLast="true" omitNorms="true"/>

    <!-- boolean type: "true" or "false" -->
    <fieldType name="boolean" class="solr.BoolField" sortMissingLast="true" omitNorms="true"/>

    <!-- The optional sortMissingLast and sortMissingFirst attributes are
         currently supported on types that are sorted internally as strings.

	 - If sortMissingLast="true", then a sort on this field will
         cause documents without the field to come after documents
         with the field, regardless of the requested sort order (asc
         or desc).

	 - If sortMissingFirst="true", then a sort on this field will
         cause documents without the field to come before documents
         with the field, regardless of the requested sort order.

	 - If sortMissingLast="false" and sortMissingFirst="false"
         (the default), then default lucene sorting will be used which
         places docs without the field first in an ascending sort and
         last in a descending sort.
      -->    


    <!-- numeric field types that store and index the text
         value verbatim (and hence don't support range queries, since the
         lexicographic ordering isn't equal to the numeric ordering) -->
    <fieldType name="integer" class="solr.IntField" omitNorms="true"/>
    <fieldType name="long" class="solr.LongField" omitNorms="true"/>
    <fieldType name="float" class="solr.FloatField" omitNorms="true"/>
    <fieldType name="double" class="solr.DoubleField" omitNorms="true"/>


    <!-- Numeric field types that manipulate the value into
         a string value that isn't human-readable in its internal form,
         but with a lexicographic ordering the same as the numeric ordering,
         so that range queries work correctly. -->

    <fieldType name="sint" class="solr.SortableIntField" 
	       sortMissingLast="true" omitNorms="true"/>
    <fieldType name="slong" class="solr.SortableLongField" 
	       sortMissingLast="true" omitNorms="true"/>
    <fieldType name="sfloat" class="solr.SortableFloatField" 
	       sortMissingLast="true" omitNorms="true"/>
    <fieldType name="sdouble" class="solr.SortableDoubleField" 
	       sortMissingLast="true" omitNorms="true"/>


    <!-- The format for this date field is of the form
         1995-12-31T23:59:59Z, and is a more restricted form of the
         canonical representation of dateTime
         http://www.w3.org/TR/xmlschema-2/#dateTime The trailing "Z"
         designates UTC time and is mandatory.  Optional fractional
         seconds are allowed: 1995-12-31T23:59:59.999Z All other
         components are mandatory.

         Expressions can also be used to denote calculations that
         should be performed relative to "NOW" to determine the value,
         ie...

         NOW/HOUR
         ... Round to the start of the current hour
         NOW-1DAY
         ... Exactly 1 day prior to now
         NOW/DAY+6MONTHS+3DAYS
         ... 6 months and 3 days in the future from the start of
         the current day
         
         Consult the DateField javadocs for more information.
      -->
    <fieldType name="date" class="solr.DateField" sortMissingLast="true" omitNorms="true"/>

    <!-- Numeric field types that manipulate the value into trie
         encoded strings which are not human readable in the internal
         form. Range searches on such fields use the fast Trie Range
         Queries which are much faster than range searches on the
         SortableNumberField types.

         For the fast range search to work, trie fields must be indexed.

         For each number being added to this field, multiple terms are
         generated as per the algorithm described in
         org.apache.lucene.search.trie package description. The
         possible number of terms depend on the precisionStep attribute
         and increase dramatically with higher precision steps (factor
         2**precisionStep). The default value of precisionStep is 8.
         
         Note that if you use a precisionStep of 32 for int/float and
         64 for long/double, then multiple terms will not be generated,
         and range search will be no faster than any other number
         field.
      -->
    <fieldType name="tint" class="solr.TrieField" 
	       type="integer" omitNorms="true" 
	       positionIncrementGap="0" indexed="true" stored="false" />

    <fieldType name="tfloat" class="solr.TrieField" type="float"
	       omitNorms="true" positionIncrementGap="0" indexed="true"
	       stored="false" />

    <fieldType name="tlong" class="solr.TrieField" type="long"
	       omitNorms="true" positionIncrementGap="0" indexed="true"
	       stored="false" />

    <fieldType name="tdouble" class="solr.TrieField" type="double"
	       omitNorms="true" positionIncrementGap="0" indexed="true"
	       stored="false" />

    <fieldType name="tdouble4" class="solr.TrieField" type="double"
	       precisionStep="4" omitNorms="true" positionIncrementGap="0"
	       indexed="true" stored="false" />

    <!-- This date field manipulates the value into a trie encoded
        strings for fast range searches. They follow the same format
        and semantics as the normal DateField and support the date
        math syntax.
      -->

    <fieldType name="tdate" class="solr.TrieField" type="date"
    omitNorms="true" positionIncrementGap="0" indexed="true"
    stored="false" />


    <!-- A text field that uses WordDelimiterFilter to enable
         splitting and matching of words on case-change, alpha numeric
         boundaries, and non-alphanumeric chars, so that a query of
         "wifi" or "wi fi" could match a document containing "Wi-Fi".
         Synonyms and stopwords are customized by external files, and
         stemming is enabled.  Duplicate tokens at the same position
         (which may result from Stemmed Synonyms or WordDelim parts)
         are removed.
      -->
    <fieldType name="text" class="solr.TextField" positionIncrementGap="100">
      <analyzer type="index">
        <tokenizer class="solr.WhitespaceTokenizerFactory"/>
        <filter class="solr.WordDelimiterFilterFactory" generateWordParts="1" 
		generateNumberParts="1" catenateWords="1" catenateNumbers="1" 
		catenateAll="0" splitOnCaseChange="1"/>
        <filter class="solr.LowerCaseFilterFactory"/>
        <filter class="solr.SnowballPorterFilterFactory" language="English" 
		protected="protwords.txt"/>
        <filter class="solr.RemoveDuplicatesTokenFilterFactory"/>
      </analyzer>

      <analyzer type="query">
        <tokenizer class="solr.WhitespaceTokenizerFactory"/>
        <filter class="solr.SynonymFilterFactory" synonyms="synonyms.txt" 
		ignoreCase="true" expand="true"/>
        <filter class="solr.WordDelimiterFilterFactory" generateWordParts="1" 
		generateNumberParts="1" catenateWords="0" catenateNumbers="0" 
		catenateAll="0" splitOnCaseChange="1"/>
        <filter class="solr.LowerCaseFilterFactory"/>
        <filter class="solr.SnowballPorterFilterFactory" language="English" protected="protwords.txt"/>
        <filter class="solr.RemoveDuplicatesTokenFilterFactory"/>
      </analyzer>
    </fieldType>


    <fieldType name="html" class="solr.TextField" positionIncrementGap="100">
      <analyzer type="index">
        <tokenizer class="solr.HTMLStripWhitespaceTokenizerFactory"/>
        <filter class="solr.WordDelimiterFilterFactory" generateWordParts="1"
		generateNumberParts="1" catenateWords="1" catenateNumbers="1"
		catenateAll="0" splitOnCaseChange="1"/>
        <filter class="solr.LowerCaseFilterFactory"/>
        <filter class="solr.SnowballPorterFilterFactory" language="English"
		protected="protwords.txt"/>
        <filter class="solr.RemoveDuplicatesTokenFilterFactory"/>
      </analyzer>

      <analyzer type="query">
        <tokenizer class="solr.WhitespaceTokenizerFactory"/>
        <filter class="solr.SynonymFilterFactory" synonyms="synonyms.txt"
		ignoreCase="true" expand="true"/>
        <filter class="solr.WordDelimiterFilterFactory" generateWordParts="1"
		generateNumberParts="1" catenateWords="0" catenateNumbers="0"
		catenateAll="0" splitOnCaseChange="1"/>
        <filter class="solr.LowerCaseFilterFactory"/>
        <filter class="solr.SnowballPorterFilterFactory" 
		language="English" protected="protwords.txt"/>
        <filter class="solr.RemoveDuplicatesTokenFilterFactory"/>
      </analyzer>
    </fieldType>

    <!--
	Setup simple analysis for spell checking
      -->
    <fieldType name="textSpell" class="solr.TextField" positionIncrementGap="100" >
      <analyzer>
        <tokenizer class="solr.StandardTokenizerFactory"/>
        <filter class="solr.LowerCaseFilterFactory"/>
        <filter class="solr.RemoveDuplicatesTokenFilterFactory"/>
      </analyzer>
    </fieldType>

  </types>


  <fields>

    <!-- The key field. It should look like <type>:<type-specific key> -->
    <field name="key" type="string" indexed="true" stored="true" required="true" /> 

    <!-- The default search field that will be a container for all of
    the text associated with things so that we can support general 
    search 'boxes' -->
    <field name="default-search-field"
        type="html" indexed="true" stored="true"
        termVectors="true" multiValued="true"/>

    <field name="LIST_NO" type="string" indexed="true" stored="true" omitNorms="true"  /> 
    <field name="LIST_AGENT" type="string" indexed="true" stored="true" omitNorms="true"  />
    <field name="UPDATE_DATE"   type="slong" indexed="true" stored="true" omitNorms="true" />
    
    <!-- The date that the item was created -->
    <field name="LIST_DATE" type="slong" indexed="true" stored="true" omitNorms="true"/>
	   
    <!-- The timestamp for when the item was added to the index. -->
    <field name="timestamp" type="date" indexed="true" stored="true" default="NOW" omitNorms="true"/>

    <!-- Dynamic field definitions.  If a field name is not found, dynamicFields
         will be used if the name matches any of the patterns.
         RESTRICTION: the glob-like pattern in the name attribute must have
         a "*" only at the start or the end.
         EXAMPLE:  name="*_i" will match any field ending in _i (like myid_i, z_i)
         Longer patterns will be matched first.  if equal size patterns
         both match, the first appearing in the schema will be used.  -->
    <dynamicField name="*_i"  type="sint"    indexed="true"  stored="true"/>
    <dynamicField name="*_s"  type="string"  indexed="true"  stored="true"/>
    <dynamicField name="*_l"  type="slong"   indexed="true"  stored="true"/>
    <dynamicField name="*_t"  type="text"    indexed="true"  stored="true"/>
    <dynamicField name="*_b"  type="boolean" indexed="true"  stored="true"/>
    <dynamicField name="*_f"  type="sfloat"  indexed="true"  stored="true"/>
    <dynamicField name="*_d"  type="sdouble" indexed="true"  stored="true"/>
    <dynamicField name="*_dt" type="date"    indexed="true"  stored="true"/>

  </fields>

  <!-- Field to use to determine and enforce document uniqueness. 
       Unless this field is marked with required="false", it will be a required field
    -->
  <uniqueKey>key</uniqueKey>

  <!-- field for the QueryParser to use when an explicit fieldname is absent -->
  <defaultSearchField>default-search-field</defaultSearchField>

  <!-- SolrQueryParser configuration: defaultOperator="AND|OR" -->
  <solrQueryParser defaultOperator="OR"/>

</schema>
